5.1 模板(Templates)
模板(Templates)是ANSI-C++ 标准中新引入的概念。如果你使用的 C++ 编译器不符合这个标准，则你很可能不能使用模板。


函数模板( Function templates)
模板(Templates)使得我们可以生成通用的函数，这些函数能够接受任意数据类型的参数，可返回任意类型的值，而不需要对所有可能的数据类型进行函数重载。这在一定程度上实现了宏（macro）的作用。它们的原型定义可以是下面两种中的任何一个：
template <class identifier> function_declaration;
template <typename identifier> function_declaration;
上面两种原型定义的不同之处在关键字class 或 typename的使用。它们实际是完全等价的，因为两种表达的意思和执行都一模一样。
例如，要生成一个模板，返回两个对象中较大的一个，我们可以这样写：
template <class GenericType>
GenericType GetMax (GenericType a, GenericType b) { return (a>b?a:b); }
在第一行声明中，我们已经生成了一个通用数据类型的模板，叫做GenericType。因此在其后面的函数中，GenericType 成为一个有效的数据类型，它被用来定义了两个参数a和 b ，并被用作了函数GetMax的返回值类型。
GenericType 仍没有代表任何具体的数据类型；当函数 GetMax 被调用的时候，我们可以使用任何有效的数据类型来调用它。这个数据类型将被作为pattern来代替函数中GenericType 出现的地方。用一个类型pattern来调用一个模板的方法如下：
function <type> (parameters);
例如，要调用GetMax 来比较两个int类型的整数可以这样写：
int x,y;
GetMax <int> (x,y);
因此，GetMax 的调用就好像所有的GenericType 出现的地方都用int 来代替一样。
这里是一个例子：
// function template
#include <iostream.h>
template <class T> T GetMax (T a, T b) {
    T result;
    result = (a>b)? a : b;
    return (result);
}
int main () {
    int i=5, j=6, k;
    long l=10, m=5, n;
    k=GetMax(i,j);
    n=GetMax(l,m);
    cout << k << endl;
    cout << n << endl;
    return 0;
}


6
10
(在这个例子中，我们将通用数据类型命名为T 而不是 GenericType ，因为T短一些，并且它是模板更为通用的标示之一，虽然使用任何有效的标示符都是可以的。)
在上面的例子中，我们对同样的函数GetMax()使用了两种参数类型：int 和 long，而只写了一种函数的实现，也就是说我们写了一个函数的模板，用了两种不同的pattern来调用它。
如你所见，在我们的模板函数 GetMax() 里，类型 T 可以被用来声明新的对象
T result;
result 是一个T类型的对象， 就像a 和 b一样，也就是说，它们都是同一类型的，这种类型就是当我们调用模板函数时写在尖括号<> 中的类型。
在这个具体的例子中，通用类型 T 被用作函数GetMax 的参数，不需要说明<int>或 <long>，编译器也可以自动检测到传入的数据类型，因此，我们也可以这样写这个例子：
int i,j;
GetMax (i,j);
因为i 和j 都是int 类型，编译器会自动假设我们想要函数按照int进行调用。这种暗示的方法更为有用，并产生同样的结果：
// function template II
#include <iostream.h>
template <class T> T GetMax (T a, T b) {
    return (a>b?a:b);
}
int main () {
    int i=5, j=6, k;
    long l=10, m=5, n;
    k=GetMax(i,j);
    n=GetMax(l,m);
    cout << k << endl;
    cout << n << endl;
    return 0;
}

6
10
注意在这个例子的main() 中我们如何调用模板函数GetMax() 而没有在括号<>中指明具体数据类型的。编译器自动决定每一个调用需要什么数据类型。
因为我们的模板函数只包括一种数据类型 (class T)， 而且它的两个参数都是同一种类型，我们不能够用两个不同类型的参数来调用它：
int i;
long l;
k = GetMax (i,l);
上面的调用就是不对的，因为我们的函数等待的是两个同种类型的参数。
我们也可以使得模板函数接受两种或两种以上类型的数据，例如：
template <class T>
T GetMin (T a, U b) { return (a<b?a:b); }
在这个例子中，我们的模板函数 GetMin() 接受两个不同类型的参数，并返回一个与第一个参数同类型的对象。在这种定义下，我们可以这样调用该函数：
int i,j;
long l;
i = GetMin <int, long> (j,l);
或者，简单的用
i = GetMin (j,l);
虽然 j 和 l 是不同的类型。

类模板(Class templates)
我们也可以定义类模板（class templates），使得一个类可以有基于通用类型的成员，而不需要在类生成的时候定义具体的数据类型，例如：
template <class T>
class pair {
T values [2];
public:
pair (T first, T second) {
values[0]=first;
values[1]=second;
}
};
上面我们定义的类可以用来存储两个任意类型的元素。例如，如果我们想要定义该类的一个对象，用来存储两个整型数据115 和 36 ，我们可以这样写：
pair<int> myobject (115, 36);
我们同时可以用这个类来生成另一个对象用来存储任何其他类型数据，例如：
pair<float> myfloats (3.0, 2.18);
在上面的例子中，类的唯一一个成员函数已经被inline 定义。如果我们要在类之外定义它的一个成员函数，我们必须在每一函数前面加template <... >。
// class templates
#include <iostream.h>
template <class T> class pair {
    T value1, value2;
    public:
        pair (T first, T second) {
            value1=first;
            value2=second;
        }
        T getmax ();
};

template <class T>
T pair<T>::getmax (){
    T retval;
    retval = value1>value2? value1 : value2;
    return retval;
}

int main () {
    pair<int> myobject (100, 75);
    cout << myobject.getmax();
    return 0;
}

100
注意成员函数getmax 是怎样开始定义的：
template <class T>
T pair::getmax ()
所有写 T 的地方都是必需的，每次你定义模板类的成员函数的时候都需要遵循类似的格式（这里第二个T表示函数返回值的类型，这个根据需要可能会有变化）。

模板特殊化(Template specialization)
模板的特殊化是当模板中的pattern有确定的类型时，模板有一个具体的实现。例如假设我们的类模板pair 包含一个取模计算（module operation）的函数，而我们希望这个函数只有当对象中存储的数据为整型(int)的时候才能工作，其他时候，我们需要这个函数总是返回0。这可以通过下面的代码来实现：
// Template specialization
#include <iostream.h>
template <class T> class pair {
T value1, value2;
public:
    pair (T first, T second){
        value1=first;
        value2=second;
    }
    T module () {return 0;}
};
template <>
class pair <int> {
int value1, value2;
public:
    pair (int first, int second){
        value1=first;
        value2=second;
    }
    int module ();
};

template <>
int pair<int>::module() {
    return value1%value2;
}

int main () {
    pair <int> myints (100,75);
    pair <float> myfloats (100.0,75.0);
    cout << myints.module() << '\n';
    cout << myfloats.module() << '\n';
    return 0;
}

25
0
由上面的代码可以看到，模板特殊化由以下格式定义：
template <> class class_name <type>
这个特殊化本身也是模板定义的一部分，因此，我们必须在该定义开头写template <>。而且因为它确实为一个具体类型的特殊定义，通用数据类型在这里不能够使用，所以第一对尖括号<> 内必须为空。在类名称后面，我们必须将这个特殊化中使用的具体数据类型写在尖括号<>中。
当我们特殊化模板的一个数据类型的时候，同时还必须重新定义类的所有成员的特殊化实现（如果你仔细看上面的例子，会发现我们不得不在特殊化的定义中包含它自己的构造函数 constructor，虽然它与通用模板中的构造函数是一样的）。这样做的原因就是特殊化不会继承通用模板的任何一个成员。

模板的参数值(Parameter values for templates)
除了模板参数前面跟关键字class 或 typename 表示一个通用类型外，函数模板和类模板还可以包含其它不是代表一个类型的参数，例如代表一个常数，这些通常是基本数据类型的。例如，下面的例子定义了一个用来存储数组的类模板：
// array template
#include <iostream.h>
template <class T, int N>
class array {
T memblock [N];
public:
    void setmember (int x, T value);
    T getmember (int x);
};
template <class T, int N>
void array<T,N>::setmember (int x, T value) {
    memblock[x]=value;
}
template <class T, int N>
T array<T,N>::getmember (int x) {
    return memblock[x];
}
int main () {
    array <int,5> myints;
    array <float,5> myfloats;
    myints.setmember (0,100);
    myfloats.setmember (3,3.1416);
    cout << myints.getmember(0) << '\n';
    cout << myfloats.getmember(3) << '\n';
    return 0;
}

100
3.1416
我们也可以为模板参数设置默认值，就像为函数参数设置默认值一样。
下面是一些模板定义的例子：
template <class T> // 最常用的：一个class 参数。
template <class T, class U> // 两个class 参数。
template <class T, int N> // 一个class 和一个整数。
template <class T = char> // 有一个默认值。
template <int Tfunc (int)> // 参数为一个函数。

模板与多文件工程 (Templates and multiple-file projects)
从编译器的角度来看，模板不同于一般的函数或类。它们在需要时才被编译(compiled on demand)，也就是说一个模板的代码直到需要生成一个对象的时候(instantiation)才被编译。当需要instantiation的时候，编译器根据模板为特定的调用数据类型生成一个特殊的函数。
当工程变得越来越大的时候，程序代码通常会被分割为多个源程序文件。在这种情况下，通常接口(interface)和实现(implementation)是分开的。用一个函数库做例子，接口通常包括所有能被调用的函数的原型定义。它们通常被定义在以.h 为扩展名的头文件 (header file) 中；而实现 (函数的定义) 则在独立的C++代码文件中。
模板这种类似宏(macro-like) 的功能，对多文件工程有一定的限制：函数或类模板的实现 (定义) 必须与原型声明在同一个文件中。也就是说我们不能再 将接口(interface)存储在单独的头文件中，而必须将接口和实现放在使用模板的同一个文件中。
回到函数库的例子，如果我们想要建立一个函数模板的库，我们不能再使用头文件(.h) ，取而代之，我们应该生成一个模板文件(template file)，将函数模板的接口和实现 都放在这个文件中 (这种文件没有惯用扩展名，除了不要使用.h扩展名或不要不加任何扩展名)。在一个工程中多次包含同时具有声明和实现的模板文件并不会产生链接错误 (linkage errors)，因为它们只有在需要时才被编译，而兼容模板的编译器应该已经考虑到这种情况，不会生成重复的代码。

5.2 名空间 (Namespaces)
通过使用名空间(Namespaces)我们可以将一组全局范围有效的类、对象或函数组织到一个名字下面。换种说法，就是它将全局范围分割成许多子域范围，每个子域范围叫做一个名空间(namespaces).
使用名空间的格式是：
namespace identifier
{
    namespace-body
}
这里identifier 是一个有效的标示符，namespace-body 是该名空间包含的一组类、对象和函数。例如：
namespace general
{
    int a, b;
}
在这个例子中，a 和 b 是名空间general中的整型变量。要想在这个名空间外面访问这两个变量，我们必须使用范围操作符::。例如，要想访问前面的两个变量，我们需要这样写：
general::a
general::b
名空间(namespaces)的作用在于全局对象或函数很有可能重名而造成重复定义的错误，名空间的使用可以避免这些错误的发生。例如：
// namespaces
#include <iostream.h>

namespace first {
    int var = 5;
}

namespace second {
    double var = 3.1416;
}

int main () {
    cout << first::var << endl;
    cout << second::var << endl;
    return 0;
}


5
3.1416
在这个例子中，两个都叫做var全局变量同时存在，一个在名空间first 下面定义，另一个在 second下面定义，由于我们使用了名空间，这里不会产生重复定义的错误。

名空间的使用 (using namespace)
使用 using 指令后面跟namespace可以将当前的嵌套层与一个指定的名空间连在一起，以便使该名空间下定义的对象和函数可以被访问，就好像它们是在全局范围内被定义的一样。它的使用遵循以下原型定义：
using namespace identifier;
例如：
// using namespace example
#include <iostream.h>

namespace first {
    int var = 5;
}

namespace second {
    double var = 3.1416;
}

int main () {
    using namespace second;
    cout << var << endl;
    cout << (var*2) << endl;
    return 0;
}

3.1416
6.2832
在这个例子中的main函数中可以看到，我们能够直接使用变量var 而不用在前面加任何范围操作符。
这里要注意，语句using namespace 只在其被声明的语句块内有效（一个语句块指在一对花括号{}内的一组指令)，如果using namespace是在全局范围内被声明的，则在所有代码中都有效。例如，如果我们想在一段程序中使用一个名空间，而在另一段程序中使用另一个名空间，则可以像以下代码中那样做：
// using namespace example
#include <iostream.h>

namespace first {
    int var = 5;
}

namespace second {
    double varr = 3.1416;
}

int main () {
    {
        using namespace first;
        cout << var << endl;
    }
    {
        using namespace second;
        cout << varr << endl;
    }
    return 0;
}


5
3.1416

别名定义(alias definition)
我们以可以为已经存在的名空间定义别名，格式为：
namespace new_name = current_name ;
标准名空间(Namespace std)
我们能够找到的关于名空间的最好的例子就是标准C++ 函数库本身。如ANSI C++ 标准定义，标准C++库中的所有类、对象和函数都是定义在名空间std下面的。
你可能已经注意到，我们在这个教程中全部忽略了这一点。作者决定这么做是因为这条规则几乎和ANSI 标准本身一样年轻 (1997) ，许多老一点的编译器并不兼容这条规则。
几乎所有的编译器，即使是那些与ANSI 标准兼容的编译器，都允许使用传统的头文件 (如iostream.h, stdlib.h, 等等)，就像我们在这个教程中所使用的一样。然而，ANSI标准完全重新设计了这些函数库，利用了模板功能，而且遵循了这条规则将所有的函数和变量定义在了名空间std下。
该标准为这些头文件定义了新的名字，对针对C++的文件基本上是使用同样的名字，但没有.h的扩展名，例如, iostream.h 变成了iostream。
如果我们使用ANSI-C++ 兼容的包含文件，我们必须记住所有的函数、类和对象是定义在名空间 std 下面的，例如：
// ANSI-C++ compliant hello world
#include <iostream>

int main () {
    std::cout << "Hello world in ANSI-C++\n";
    return 0;
}
Hello world in ANSI-C++
更常用的方法是使用using namespace ，这样我们就不必在所有标准空间中定义的函数或对象前面总是使用范围操作符::了 ：
// ANSI-C++ compliant hello world (II)
#include <iostream>
using namespace std;

int main () {
    cout << "Hello world in ANSI-C++\n";
    return 0;
}
Hello world in ANSI-C++
对于STL 用户，强烈建议使用ANSI-compliant 方式来包含标准函数库。

5.3 类型转换高级 (Advacned Class Type-casting)
目前为止，我们一直使用传统的类型转换符来进行简单对象的类型转换。例如，要把一个double类型的浮点型数字转换为int 的整型数字，我们是这样做的：
int i;
double d;
i = (int) d;
或者
i = int (d);
这样做对基本数据类型时没问题的，因为基本数据类型的转换已经有标准的定义。同样的操作也可以被在类或类的指针上，因此以下例子中的写法也是没有问题的：
// class type-casting
#include <iostream.h>

class CDummy {
    int i;
};

class CAddition {
    int x,y;
    public:
    CAddition (int a, int b) { x=a; y=b; }
    int result() { return x+y;}
};

int main () {
    CDummy d;
    CAddition * padd;
    padd = (CAddition*) &d;
    cout << padd->result();
    return 0;
}

虽然以上程序在C++中是没有语法错误的(多数编译器甚至不会产生警告信息)，但这段程序没有什么实际的逻辑意义。我们使用了CAddition 的成员函数result 而没有定义一个相应的该类的对象：padd 并不是一个对象，它只是一个指针，被我们赋值指向一个毫无关系的对象的地址。当在程序运行到访问它的result 成员函数时，将会有一个运行错误(run-time error)产生，或生成一个意外的结果。
为了控制这种类之间的转换，ANSI-C++ 标准定义了4种新的类型转换操作符： reinterpret_cast, static_cast, dynamic_cast 和 const_cast。所有这些操作符都是同样的使用格式：
reinterpret_cast <new_type> (expression)
dynamic_cast <new_type> (expression)
static_cast <new_type> (expression)
const_cast <new_type> (expression)
这里new_type 是要转换成的目标类型，expression 是要被转换的内容。为了便于理解，模仿传统转换操作符，它们的含义是这样的：
(new_type) expression
new_type (expression)
reinterpret_cast
reinterpret_cast 可以将一个指针转换为任意其它类型的指针。它也可以用来将一个指针转换为一个整型，或反之亦然。
这个操作符可以在互不相关的类之间进行指针转换，操作的结果是简单的将一个指针的二进制数据(binary copy)复制到另一个指针。对指针指向的内容不做任何检查或转换。
如果这种复制发生在一个指针到一个整数之间，则对其内容的解释取决于不同的系统，因此任何实现都是不可移植(non portable)的。一个指针如果被转换为一个能够完全存储它的足够大的整数中，则是可以再被转换回来成为指针的。
例如：
class A {};
class B {};
A * a = new A;
B * b = reinterpret_cast<B*>(a);
reinterpret_cast 对所有指针的处理与传统的类型转换符所作的一模一样。

static_cast
static_cast 可以执行所有能够隐含执行的类型转换，以及它们的反向操作（即使这种方向操作是不允许隐含执行的）。
用于类的指针，也就是说，它允许将一个引申类的指针转换为其基类类型（这是可以被隐含执行的有效转换），同时也允许进行相反的转换：将一个基类转换为一个引申类类型。
在后面一种情况中，不会检查被转换的基类是否真正完全是目标类型的。例如下面的代码是合法的：
class Base {};
class Derived: public Base {};
Base * a = new Base;
Derived * b = static_cast(a);
static_cast除了能够对类指针进行操作，还可以被用来进行类中明确定义的转换，以及对基本类型的标准转换：
double d=3.14159265;
int i = static_cast<int>(d);
译者注：如果你对这部分看不太懂，请结合下面的dynamic_cast一起看，也许会帮助理解。

dynamic_cast
dynamic_cast 完全被用来进行指针的操作。它可以用来进行任何可以隐含进行的转换操作以及它们被用于多态类情况下的方向操作。然而与static_cast不同的是， dynamic_cast 会检查后一种情况的操作是否合法，也就是说它会检查类型转换操作是否会返回一个被要求类型的有效的完整的对象。
这种检查是在程序运行过程中进行的。如果被转换的指针所指向的对象不是一个被要求类型的有效完整的对象，返回值将会是一个空指针NULL 。
class Base { virtual dummy(){}; };
class Derived : public Base { };


Base* b1 = new Derived;
Base* b2 = new Base;
Derived* d1 = dynamic_cast(b1);   // succeeds
Derived* d2 = dynamic_cast(b2);   // fails: returns NULL

如果类型转换被用在引用(reference)类型上，而这个转换不可能进行的话，一个bad_cast 类型的例外(exception)将会被抛出：
class Base { virtual dummy(){}; };
class Derived : public Base { };

Base* b1 = new Derived;
Base* b2 = new Base;
Derived d1 = dynamic_cast(b1);   // succeeds
Derived d2 = dynamic_cast(b2);   // fails: exception thrown


const_cast
这种类型转换对常量const 进行设置或取消操作：
class C {};
const C * a = new C;
C * b = const_cast<C*> (a);
其他3种cast 操作符都不可以修改一个对象的常量属性(constness)。

typeid
ANSI-C++ 还定义了一个新的操作符叫做 typeid ，它检查一个表达式的类型：
typeid (expression)
这个操作符返回一个类型为type_info的常量对象指针，这种类型定义在标准头函数中。这种返回值可以用操作符 == 和 != 来互相进行比较，也可以用来通过name()函数获得一个描述数据类型或类名称的字符串，例如：
// typeid, typeinfo
#include <iostream.h>
#include <typeinfo>

class CDummy { };

int main () {
    CDummy* a,b;
    if (typeid(a) != typeid(b)) {
        cout << "a and b are of different types:\n";
        cout << "a is: " << typeid(a).name() << '\n';
        cout << "b is: " << typeid(b).name() << '\n';
    }
    return 0;
}


a and b are of different types:
a is: class CDummy *
b is: class CDummy

5.4 预处理指令 (Preprocessor Directives)
预处理指令是我们写在程序代码中的给预处理器(preprocessor)的 命令，而不是程序本身的语句。预处理器在我们编译一个C++程序时由编译器自动执行，它负责控制对程序代码的第一次验证和消化。
所有这些指令必须写在单独的一行中，它们不需要加结尾的分号;。

#define
在这个教程的开头我们已经提到了一种预处理指令： #define ，可以被用来生成宏定义常量(defined constantants 或 macros)，它的形式是：
#define name value
它的作用是定义一个叫做name 的宏定义，然后每当在程序中遇到这个名字的时候，它就会被value代替，例如：
#define MAX_WIDTH 100
char str1[MAX_WIDTH];
char str2[MAX_WIDTH];
它定义了两个最多可以存储100个字符的字符串。
#define 也可以被用来定义宏函数：
#define getmax(a,b) a>b?a:b
int x=5, y;
y = getmax(x,2);
这段代码执行后y 的值为5 。

#undef
#undef 完成与 #define相反的工作，它取消对传入的参数的宏定义：
#define MAX_WIDTH 100
char str1[MAX_WIDTH];
#undef MAX_WIDTH
#define MAX_WIDTH 200
char str2[MAX_WIDTH];

#ifdef, #ifndef, #if, #endif, #else and #elif
这些指令可以使程序的一部分在某种条件下被忽略。
#ifdef 可以使一段程序只有在某个指定常量已经被定义了的情况下才被编译，无论被定义的值是什么。它的操作是：
#ifdef name
// code here
#endif
例如：
#ifdef MAX_WIDTH
char str[MAX_WIDTH];
#endif
在这个例子中，语句char str[MAX_WIDTH]; 只有在宏定义常量MAX_WIDTH 已经被定义的情况下才被编译器考虑，不管它的值是什么。如果它还没有被定义，这一行代码则不会被包括在程序中。
#ifndef 起相反的作用：在指令#ifndef 和 #endif 之间的代码只有在某个常量没有被定义的情况下才被编译，例如：
#ifndef MAX_WIDTH
#define MAX_WIDTH 100
#endif
char str[MAX_WIDTH];
这个例子中，如果当处理到这段代码的时候MAX_WIDTH 还没有被定义，则它会被定义为值100。而如果它已经被定义了，那么它会保持原值 (因为#define 语句这一行不会被执行) 。
指令#if, #else 和 #elif (elif = else if) 用来使得其后面所跟的程序部分只有在特定条件下才被编译。这些条件只能够是常量表达式，例如：
#if MAX_WIDTH>200
#undef MAX_WIDTH
#define MAX_WIDTH 200

#elsif MAX_WIDTH<50
#undef MAX_WIDTH
#define MAX_WIDTH 50

#else
#undef MAX_WIDTH
#define MAX_WIDTH 100
#endif

char str[MAX_WIDTH];
注意看这一连串的指令 #if, #elsif 和 #else 是怎样以 #endif 结尾的。

#line
当我们编译一段程序的时候，如果有错误发生，编译器会在错误前面显示出错文件的名称以及文件中的第几行发生的错误。
指令#line 可以使我们对这两点进行控制，也就是说当出错时显示文件中的行数以及我们希望显示的文件名。它的格式是：
#line number "filename"
这里number 是将会赋给下一行的新行数。它后面的行数从这一点逐个递增。
filename 是一个可选参数，用来替换自此行以后出错时显示的文件名，直到有另外一个#line指令替换它或直到文件的末尾。例如：
#line 1 "assigning variable"
int a?;
这段代码将会产生一个错误，显示为在文件"assigning variable", line 1 。

#error
这个指令将中断编译过程并返回一个参数中定义的出错信息，例如：
#ifndef __cplusplus
#error A C++ compiler is required
#endif
这个例子中如果 __cplusplus 没有被定义就会中断编译过程。

#include
这个指令我们已经见到很多次。当预处理器找到一个#include 指令时，它用指定文件的全部内容替换这条语句。声明包含一个文件有两种方式：
#include "file"
#include <file>
两种表达的唯一区别是编译器应该在什么路经下寻找指定的文件。第一种情况下，文件名被写在双引号中，编译器首先在包含这条指令的文件所在的目录下进行寻找，如果找不到指定文件，编译器再到被配置的默认路径下（也就是标准头文件路径下）进行寻找。
如果文件名是在尖括号 <> 中，编译器会直接到默认标准头文件路径下寻找。

#pragma
这个指令是用来对编译器进行配置的，针对你所使用的平台和编译器而有所不同。要了解更多信息，请参考你的编译器手册。
如果你的编译器不支持某个#pragma的特定参数，这个参数会被忽略，不会产生出错。

预定义的宏名称 (Predefined macro names)
以下宏名称在任何时候都是定义好的：

macro	value
__LINE__	整数值，表示当前正在编译的行在源文件中的行数。
__FILE__	字符串，表示被编译的源文件的文件名。
__DATE__	一个格式为 "Mmm dd yyyy" 的字符串，存储编译开始的日期。
__TIME__	一个格式为 "hh:mm:ss" 的字符串，存储编译开始的时间。

例如：
// 标准宏名称
#include <iostream>
using namespace std;

int main()
{
    cout << "This is the line number "
    << __LINE__;
    cout << " of file " << __FILE__
    << ".\n";
    cout << "Its compilation began "
    << __DATE__;
    cout << " at " << __TIME__ << ".\n";
    return 0;
}

This is the line number 7 of file /home/jay/stdmacronames.cpp.
Its compilation began Nov 1 2005 at 10:12:29.
