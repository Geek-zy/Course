2.1 控制结构（Control Structures）
一个程序的语句往往并不仅限于线性顺序结构。在程序的执行过程中它可能被分成两支执行，可能重复某些语句，也可能根据一些判断结果而执行不同的语句。因此C++ 提供一些控制结构语句 (control structures) 来实现这些执行顺序。
为了介绍程序的执行顺序，我们需要先介绍一个新概念：语句块(block of instructions)。一个语句块(A block of instructions) 是一组互相之间由分号semicolons (;) 分隔开但整体被花括号curly bracket signs: { and }括起来的语句。
本节中我们将看到的大多数控制结构允许一个通用的statement做参数，这个statement根据需要可以是一条语句，也可以是一组语句组成的语句块。如果我们只需要一条语句做statement，它可以不被括在花括号 ({}) 内。但如果我们需要多条语句共同做statement，则必须把它们括在花括号内 ({}) 以组成一个语句块。

条件结构Conditional structure: if and else
条件结构用来实现仅在某种条件满足的情况下才执行一条语句或一个语句块。它的形式是：
if (condition) statement
这里 condition 是一个将被计算的表达式（expression）。如果表达式值为真，即条件(condition)为true，statement 将被执行。否则，statement 将被忽略（不被执行），程序从整个条件结构之后的下一条语句继续执行。
例如，以下程序段实现只有当变量x存储的值确实为100的时候才输出"x is 100"：
if (x == 100)
cout << "x is 100";
如果我们需要在条件condition为真true的时候执行一条以上的语句，我们可以花括号{}将语句括起来组成一个语句块：
if (x == 100)
{
    cout << "x is ";
    cout << x;
}
我们可以用关键字else 来指定当条件不能被满足时需要执行的语句，它需要和if 一起使用，形式是：
if (condition) statement1 else statement2
例如：
if (x == 100)
    cout << "x is 100";
else
    cout << "x is not 100";
以上程序如果x的值为100，则在屏幕上打出x is 100，如果x不是100，而且也只有在x不是100的时候，屏幕上将打出x is not 100。
多个if + else 的结构被连接起来使用来判断数值的范围。以下例子显示了如何用它来判断变量 x中当前存储的数值是正值，负值还是既不正也不负，即等于0 。
if (x > 0)
    cout << "x is positive";
else if (x < 0)
    cout << "x is negative";
else
    cout << "x is 0";
记住当我们需要执行多条语句时，必须使用花括号{}将它们括起来以组成一个语句块block of instructions。

重复结构 Iteration structures 或循环loops
循环Loops 的目的是重复执行一组语句一定的次数或直到满足某种条件。
while 循环
格式是：
while (表达式expression) 语句statement
它的功能是当expression 的值为真true时重复执行statement。
例如，下面我们将用while循环来写一个倒计数程序：
// custom countdown using while
#include <iostream.h>
int main ()
{
    int n;
    cout << "Enter the starting number > ";
    cin >> n;
    while (n>0) {
        cout << n << ", ";
        --n;
    }
    cout << "FIRE!";
    return 0;
}

Enter the starting number > 8
8, 7, 6, 5, 4, 3, 2, 1, FIRE!
程序开始时提示用户输入一个倒计数的初始值。然后while 循环开始，如果用户输入的数值满足条件n>0 (即 n 比0 大)，后面跟的语句块将会被执行一定的次数，直到条件 (n>0) 不再满足（变为false）。
以上程序的所有处理过程可以用以下的描述来解释：
从main开始：
1.	用户输入一个数值赋给n.
2.	while语句检查(n>0)是否成立，这时有两种可能：
o	true: 执行statement (到第3步)
o	false: 跳过statement. 程序直接执行第5步.
3.	执行statement:
cout << n << ", ";
--n;
(将n 的值打印在屏幕上，然后将n 的值减1).
4.	语句块结束，自动返回第2步。
5.	继续执行语句块之后的程序：打印 FIRE! ，程序结束。
我们必须考虑到循环必须在某个点结束，因此在语句块之内（loop的statement之内) 我们必须提供一些方法使得条件condition 可以在某个时刻变为假 false，否则循环将无限重复下去。在这个例子里，我们用语句--n;使得循环在重复一定的次数后变为false ：当 n 变为0， 倒计数结束。
do-while 循环
格式：
do 语句statement while (条件condition);
它的功能与while 循环一抹一样，除了在do-while循环中是先执行statement 然后才检查条件condition ，而不想while循环中先检查条件然后才执行statement。这样，即使条件condition从来没有被满足过，statement 仍至少被执行一次。例如，下面的程序重复输出（echoes）用户输入的任何数值，直到用户输入0为止。
// number echoer
#include <iostream.h>
int main ()
{
    unsigned long n;
    do {
        cout << "Enter number (0 to end): ";
        cin >> n;
        cout << "You entered: " << n << "\n";
    } while (n != 0);
    return 0;
}

Enter number (0 to end): 12345
You entered: 12345
Enter number (0 to end): 160277
You entered: 160277
Enter number (0 to end): 0
You entered: 0
do-while 循环通常被用在判断循环结束的条件是在循环语句内部被决定的情况下，比如以上的例子，在循环的语句块内用户的输入决定了循环是否结束。如果用户永远不输入0，则循环永远不会结束。
for 循环
格式是：
for (initialization; condition; increase) statement;
它的主要功能是当条件condition 为真true时重复执行语句statement ，类似while 循环。但除此之外，for 还提供了写初始化语句initialization 和增值语句increase 的地方。因此这种循环结构是特别为执行由计数器控制的循环而设计的。
它按以下方式工作：
1.	执行初始化initialization 。通常它是设置一个计数器变量（counter variable）的初始值，初始化仅被执行一次。
2.	检查条件condition ，如果条件为真true，继续循环，否则循环结束循环中语句statement 被跳过。
3.	执行语句statement 。像以前一样，它可以是一个单独的语句，也可以是一个由花括号{ }括起来的语句块。
4.	最后增值域（increase field）中的语句被执行，循环返回第2步。注意增值域中可能是任何语句，而不一定只是将计数器增加的语句。例如下面的例子中计数器实际为减1，而不是加1。
下面是用for循环实现的倒计数的例子：
// countdown using a for loop
#include <iostream.h>
int main ()
{
    for (int n=10; n>0; n--) {
        cout << n << ", ";
    }
    cout << "FIRE!";
    return 0;
}

10, 9, 8, 7, 6, 5, 4, 3, 2, 1, FIRE!
初始化initialization 和增值increase 域是可选的（即可以为空）。但这些域为空的时候，它们和其他域之间间隔的分号不可以省略。例如我们可以写：for (;n<10;)来表示没有初始化和增值语句；或for (;n<10;n++) 来表示有增值语句但没有初始化语句。
另外我们也可以在for循环初始化或增值域中放一条以上的语句，中间用逗号 coma(,)隔开。例如假设我们想在循环中初始化一个以上的变量，可以用以下的程序来实现：
for ( n=0, i=100 ; n!=i ; n++, i-- )
{
// whatever here...
}
这个循环将被执行50 次，如果n 和i 在循还内部都不被改变的话：

n初始值为0，i初始值为100，条件是(n!=i)(即n不能等于i)。因为每次循环n加1，而且i减1，循环的条件将会在第50次循环之后变为假false（n 和 i 都等于50）。
分支控制和跳转(Bifurcation of control and jumps)
break 语句
通过使用break语句，即使在结束条件没有满足的情况下，我们也可以跳出一个循环。它可以被用来结束一个无限循环（infinite loop），或强迫循环在其自然结束之前结束。例如，我们想要在倒计数自然结束之前强迫它停止（也许因为一个引擎故障）：
// break loop example
#include <iostream.h>
int main ()
{
    int n;
    for (n=10; n>0; n--) {
        cout << n << ", ";
        if (n==3)
        {
            cout << "countdown aborted!";
            break;
        }
    }
    return 0;
}

10, 9, 8, 7, 6, 5, 4, 3, countdown aborted!
continue 语句
continue语句使得程序跳过当前循环中剩下的部分而直接进入下一次循环，就好像循环中语句块的结尾已经到了使得循环进入下一次重复。例如，下面例子中倒计数时我们将跳过数字5的输出：
// continue loop example
#include <iostream.h>
int main ()
{
    for (int n=10; n>0; n--) {
        if (n==5) continue;
        cout << n << ", ";
    }
    cout << "FIRE!";
    return 0;
}

10, 9, 8, 7, 6, 4, 3, 2, 1, FIRE!
goto 语句
通过使用goto语句可以使程序从一点跳转到另外一点。你必须谨慎只用这条语句，因为它的执行可以忽略任何嵌套限制。
跳转的目标点可以由一个标示符(label)来标明，该标示符作为goto语句的参数。一个标示符(label)由一个标识名称后面跟一个冒号colon (:)组成。
通常除了底层程序爱好者使用这条语句，它在结构化或面向对象的编程中并不常用。下面的例子中我们用goto来实现倒计数循环：
// goto loop example
#include <iostream.h>
int main ()
{
    int n=10;
    loop:
    cout << n << ", ";
    n--;
    if (n>0) goto loop;
    cout << "FIRE!";
    return 0;
}

10, 9, 8, 7, 6, 5, 4, 3, 2, 1, FIRE!
exit 函数
exit是一个在cstdlib (stdlib.h)库中定义的函数。
exit的目的是一个特定的退出代码来结束程序的运行，它的原型(prototype)是：
void exit (int exit code);
exit code是由操作系统使用或被调用程序使用。通常exit code为0表示程序正常结束，任何其他值表示程序执行过程中出现了错误。

选择结构The selective Structure: switch
switch 语句的语法比较特殊。它的目标是对一个表达式检查多个可能常量值，有些像我们在本节开头学习的把几个if 和else if 语句连接起来的结构。它的形式是：
switch (expression) {
case constant1:
block of instructions 1
break;
case constant2:
block of instructions 2
break;
.
.
.
default:
default block of instructions
}
它按以下方式执行：
switch 计算表达式expression 的值，并检查它是否与第一个常量constant1相等，如果相等，程序执行常量1后面的语句块block of instructions 1 直到碰到关键字break ，程序跳转到switch 选择结构的结尾处。
如果expression 不等于constant1，程序检查表达式expression 的值是否等于第二个常量constant2， 如果相等，程序将执行常量2后面的语句块block of instructions 2 直到碰到关键字break。
依此类推，直到最后如果表达式expression 的值不等于任何前面的常量（你可以用case语句指明任意数量的常量值来要求检查），程序将执行默认区default: 后面的语句，如果它存在的话。default: 选项是可以省略的。
下面的两段代码段功能相同：
switch example	if-else equivalent
switch (x) {
case 1:
    cout << "x is 1";
    break;
case 2:
    cout << "x is 2";
    break;
default:
    cout << "value of x unknown";
}

if (x == 1) {
    cout << "x is 1";
}
else if (x == 2) {
    cout << "x is 2";
}
else {
    cout << "value of x unknown";
}
前面已经提到switch的语法有点特殊。注意每个语句块结尾包含的break语句。这是必须的，因为如果不这样做，例如在语句块block of instructions 1 的结尾没有break，程序执行将不会跳转到switch选择的结尾处 (}) ，而是继续执行下面的语句块，直到第一次遇到break语句或到switch选择结构的结尾。因此，不需要在每一个case 域内加花括号{ } 。这个特点同时可以帮助实现对不同的可能值执行相同的语句块。例如：
switch (x) {
case 1:
case 2:
case 3:
    cout << "x is 1, 2 or 3";
    break;
default:
    cout << "x is not 1, 2 nor 3";
}
注意switch只能被用来比较表达式和不同常量的值constants。因此我们不能够把变量或范围放在case之后，例如 (case (n*2):) 或 (case (1..3):) 都不可以，因为它们不是有效的常量。 如果你需要检查范围或非常量数值，使用连续的if 和else if 语句。
2.2 函数I（Functions I）
通过使用函数(functions)我们可以把我们的程序以更模块化的形式组织起来，从而利用C++所能提供的所有结构化编程的潜力。
一个函数(function)是一个可以从程序其它地方调用执行的语句块。以下是它的格式：

type name ( argument1, argument2, ...) statement

这里：
?	type 是函数返回的数据的类型
?	name 是函数被调用时使用的名
?	argument 是函数调用需要传入的参量(可以声明任意多个参量)。每个参量(argument)由一个数据类型后面跟一个标识名称组成，就像变量声明中一样(例如，int x)。参量仅在函数范围内有效，可以和函数中的其它变量一样使用， 它们使得函数在被调用时可以传入参数，不同的参数用逗号(comma)隔开.
?	statement 是函数的内容。它可以是一句指令，也可以是一组指令组成的语句块。如果是一组指令，则语句块必须用花括号{}括起来，这也是我们最常见到情况。其实为了使程序的格式更加统一清晰，建议在仅有一条指令的时候也使用花括号，这是一个良好的编程习惯。
下面看一下第一个函数的例子：
// function example
#include <iostream.h>
int addition (int a, int b)
{
    int r;
    r=a+b;
    return (r);
}

int main ()
{
    int z;
    z = addition (5,3);
    cout << "The result is " << z;
    return 0;
}

The result is 8
记得在我们教程开始时说过：一个C++程序总是从main函数开始执行。 因此我们从那里开始。
我们可以看到 main 函数以定义一个整型变量z 开始。紧跟着我们看到调用addition 函数。我们可以看到函数调用的写法和上面函数定义本身十分相似：

参数有明显的对应关系。在main 函数中我们调用addition 函数，并传入两个数值： 5 和3 ，　它们对应函数addition 中定义的参数int a 和int b。
当函数在main 中被调用时，程序执行的控制权从main转移到函数addition。调用传递的两个参数的数值 (5 和3) 被复制到函数的本地变量（local variables） int a 和int b 中。
函数addition 中定义了新的变量(int r;)，通过表达式r=a+b;, 它把a 加b 的结果赋给r 。因为传过来的参数a 和b 的值分别为5 和3 ，所以结果是8。
下面一行代码：
return (r);
结束函数addition，并把控制权交还给调用它的函数(main) ，从调用addition的地方开始继续向下执行。另外，return 在调用的时候后面跟着变量r (return (r);), 它当时的值为8, 这个值被称为函数的返回值。

函数返回的数值就是函数的计算结果，因此， z 将存储函数addition (5, 3)返回的数值, 即8。用另一种方式解释，你也可以想象成调用函数(addition (5,3)) 被替换成了它的返回值 (8)。
接下来main中的下一行代码是：
cout << "The result is " << z;
它把结果打印在屏幕上。
变量的范围(Scope of variables)
你必须考虑到变量的范围只是在定义该变量的函数或指令块内有效，而不能在它的函数或指令块之外使用。 例如，在上面的例子里就不可能在main 中直接使用变量a, b 或 r ，因为它们是函数addition的本地变量（local variable）。在函数addition中也不可能直接使用变量z，因为它是main的本地变量。
因此，本地变量 (local variables)的范围是局限于声明它的嵌套范围之内的。尽管如此，你还可以定义全局变量(global variables)，它们可以在代码的任何位置被访问，不管在函数以内还是以外。要定义全局变量，你必须在所有函数或代码块之外定义它们，也就是说，直接在程序体中声明它们。
这里是另一个关于函数的例子：
// function example
#include <iostream.h>
int subtraction (int a, int b)
{
    int r;
    r=a-b;
    return (r);
}

int main ()
{
    int x=5, y=3, z;
    z = subtraction (7,2);
    cout << "The first result is " << z << '\n';
    cout << "The second result is " << subtraction (7,2) << '\n';
    cout << "The third result is " << subtraction (x,y) << '\n';
    z= 4 + subtraction (x,y);
    cout << "The fourth result is " << z << '\n';
    return 0;
}

The first result is 5
The second result is 5
The third result is 2
The fourth result is 6
在这个例子中，我们定义了函数subtraction。这个函数的功能是计算传入的两个参数的差值并将结果返回。
在 main 函数中，函数subtraction被调用了多次。我们用了几种不同的调用方法，因此你可以看到在不同的情况下函数如何被调用。
为了更好的理解这些例子，你需要考虑到被调用的函数其实完全可以由它所返回的值来代替。例如在上面例子中第一种情况下 (这种调用你应该已经知道了，因为我们在前面的例子中已经用过这种形式的调用):
z = subtraction (7,2);
cout << "The first result is " << z;
如果我们把函数调用用它的结果(也就是5)替换，我们将得到：
z = 5;
cout << "The first result is " << z;
同样的
cout << "The second result is " << subtraction (7,2);
与前面的调用有同样的结果，但在这里我们把对函数subtraction 的调用直接用作cout的参数。这可以简单想象成我们写的是：
cout << "The second result is " << 5;
因为5 是subtraction (7,2)的结果。
在
cout << "The third result is " << subtraction (x,y);
中，与前面的调用唯一的不同之处是这里调用subtraction 时的参数使用的是变量而不是常量。这样用时毫无问题的。在这个例子里，传入函数subtraction 的参数值是变量x 和y中存储的数值，即分别为5 和3，结果为2。
第四种调用也是一样的。只要知道除了
z = 4 + subtraction (x,y);
我们也可以写成：
z = subtraction (x,y) + 4;
它们的结果是完全一样的。注意在整个表达式的结尾写上分号semicolon sign (;)。它并不需要总是跟在函数调用的后面，因为你可以有一次把它们想象成函数被它的结果所替代：
z = 4 + 2;
z = 2 + 4;
没有返回值类型的函数，使用void.
如果你记得函数声明的格式：
type name ( argument1, argument2 ...) statement
就会知道函数声明必须以一个数据类型（type）开头，它是函数由return 语句所返回数据类型。但是如果我们并不打算返回任何数据那该怎么办呢？
假设我们要写一个函数，它的功能是打印在屏幕上打印一些信息。我们不需要它返回任何值，而且我们也不需要它接受任何参数。C语言为这些情况设计了void 类型。让我们看一下下面的例子：
// void 函数示例
#include <iostream>
using namespace std;

void printmessage ()
{
    cout << "I'm a function!";
}

int main ()
{
    printmessage ();
    return 0;
}

I'm a function!
void还可以被用在函数参数位置，表示我们明确希望这个函数在被调用时不需要任何参数。例如上面的函数printmessage也可以写为以下形式：
void printmessage (void)
{
    cout << "I'm a function!";
}
虽然在C++ 中void可以被省略，我们还是建议写出void，以便明确指出函数不需要参数。
你必须时刻知道的是调用一个函数时要写出它的名字并把参数写在后面的括号内。但如果函数不需要参数，后面的括号并不能省略。因此调用函数 printmessage 的格式是
printmessage();
函数名称后面的括号就明确表示了它是一个函数调用，而不是一个变量名称或其它什么语句。以下调用函数的方式就不对：
printmessage;
2.3 函数II（Functions II）
参数按数值传递和按地址传递(Arguments passed by value and by reference)
到目前为止，我们看到的所有函数中，传递到函数中的参数全部是按数值传递的(by value)。也就是说，当我们调用一个带有参数的函数时，我们传递到函数中的是变量的数值而不是变量本身。 例如，假设我们用下面的代码调用我们的第一个函数addition ：
int x=5, y=3, z;
z = addition ( x , y );
在这个例子里我们调用函数addition 同时将x和y的值传给它，即分别为5和3，而不是两个变量：

这样，当函数addition被调用时，它的变量a和b的值分别变为5和3，但在函数addition内对变量a 或b 所做的任何修改不会影响变量他外面的变量x 和 y 的值，因为变量x和y并没有把它们自己传递给函数，而只是传递了他们的数值。
但在某些情况下你可能需要在一个函数内控制一个函数以外的变量。要实现这种操作，我们必须使用按地址传递的参数（arguments passed by reference），就象下面例子中的函数duplicate：
// passing parameters by reference
#include <iostream.h>

void duplicate (int& a, int& b, int& c)
{
    a*=2;
    b*=2;
    c*=2;
}

int main ()
{
    int x=1, y=3, z=7;
    duplicate (x, y, z);
    cout << "x=" << x << ", y=" << y << ", z=" << z;
    return 0;
}

x=2, y=6, z=14
第一个应该注意的事项是在函数duplicate的声明(declaration)中，每一个变量的类型后面跟了一个地址符ampersand sign (&)，它的作用是指明变量是按地址传递的（by reference），而不是像通常一样按数值传递的（by value）。
当按地址传递（pass by reference）一个变量的时候，我们是在传递这个变量本身，我们在函数中对变量所做的任何修改将会影响到函数外面被传递的变量。

用另一种方式来说，我们已经把变量a, b，c和调用函数时使用的参数(x, y和 z)联系起来了，因此如果我们在函数内对a 进行操作，函数外面的x 值也会改变。同样，任何对b 的改变也会影响y，对c 的改变也会影响z>。
这就是为什么上面的程序中，主程序main中的三个变量x, y和z在调用函数duplicate 后打印结果显示他们的值增加了一倍。
如果在声明下面的函数：
void duplicate (int& a, int& b, int& c)
时，我们是按这样声明的：
void duplicate (int a, int b, int c)
也就是不写地址符 ampersand (&)，我们也就没有将参数的地址传递给函数，而是传递了它们的值，因此，屏幕上显示的输出结果x, y ，z 的值将不会改变，仍是1，3，7。
这种用地址符 ampersand (&)来声明按地址"by reference"传递参数的方式只是在C++中适用。在C 语言中，我们必须用指针(pointers)来做相同的操作。
按地址传递(Passing by reference)是一个使函数返回多个值的有效方法。例如，下面是一个函数，它可以返回第一个输入参数的前一个和后一个数值。
// more than one returning value
#include <iostream.h>
void prevnext (int x, int& prev, int& next)
{
    prev = x-1;
    next = x+1;
}

int main ()
{
    int x=100, y, z;
    prevnext (x, y, z);
    cout << "Previous=" << y << ", Next=" << z;
    return 0;
}

Previous=99, Next=101

参数的默认值(Default values in arguments)
当声明一个函数的时候我们可以给每一个参数指定一个默认值。如果当函数被调用时没有给出该参数的值，那么这个默认值将被使用。指定参数默认值只需要在函数声明时把一个数值赋给参数。如果函数被调用时没有数值传递给该参数，那么默认值将被使用。但如果有指定的数值传递给参数，那么默认值将被指定的数值取代。例如：
// default values in functions
#include <iostream.h>
int divide (int a, int b=2) {
    int r;
    r=a/b;
    return (r);
}

int main () {
    cout << divide (12);
    cout << endl;
    cout << divide (20,4);
    return 0;
}

6
5
我们可以看到在程序中有两次调用函数divide。第一次调用：
divide (12)
只有一个参数被指明，但函数divide允许有两个参数。因此函数divide 假设第二个参数的值为2，因为我们已经定义了它为该参数缺省的默认值(注意函数声明中的int b=2)。因此这次函数调用的结果是 6 (12/2)。
在第二次调用中：
divide (20,4)
这里有两个参数，所以默认值 (int b=2) 被传入的参数值4所取代，使得最后结果为 5 (20/4).

函数重载(Overloaded functions)
两个不同的函数可以用同样的名字，只要它们的参量(arguments)的原型(prototype)不同，也就是说你可以把同一个名字给多个函数，如果它们用不同数量的参数，或不同类型的参数。例如：
// overloaded function
#include <iostream.h>

int divide (int a, int b) {
    return (a/b);
}

float divide (float a, float b) {
    return (a/b);
}

int main () {
    int x=5,y=2;
    float n=5.0,m=2.0;
    cout << divide (x,y);
    cout << "\n";
    cout << divide (n,m);
    cout << "\n";
    return 0;
}

2
2.5
在这个例子里，我们用同一个名字定义了两个不同函数，当它们其中一个接受两个整型(int)参数，另一个则接受两个浮点型(float)参数。编译器 (compiler)通过检查传入的参数的类型来确定是哪一个函数被调用。如果调用传入的是两个整数参数，那么是原型定义中有两个整型(int)参量的函数被调用，如果传入的是两个浮点数，那么是原型定义中有两个浮点型(float)参量的函数被调用。
为了简单起见，这里我们用的两个函数的代码相同，但这并不是必须的。你可以让两个函数用同一个名字同时完成完全不同的操作。

Inline 函数（inline functions）
inline 指令可以被放在函数声明之前，要求该函数必须在被调用的地方以代码形式被编译。这相当于一个宏定义(macro)。它的好处只对短小的函数有效，这种情况下因为避免了调用函数的一些常规操作的时间(overhead)，如参数堆栈操作的时间，所以编译结果的运行代码会更快一些。
它的声明形式是：
inline type name ( arguments ... ) { instructions ... }
它的调用和其他的函数调用一样。调用函数的时候并不需要写关键字inline ，只有在函数声明前需要写。

递归（Recursivity）
递归(recursivity)指函数将被自己调用的特点。它对排序(sorting)和阶乘(factorial)运算很有用。例如要获得一个数字n的阶乘，它的数学公式是：
n! = n * (n-1) * (n-2) * (n-3) ... * 1
更具体一些，5! (factorial of 5) 是：
5! = 5 * 4 * 3 * 2 * 1 = 120
而用一个递归函数来实现这个运算将如以下代码：
// factorial calculator
#include <iostream.h>

long factorial (long a){
    if (a > 1) return (a * factorial (a-1));
    else return (1);
}

int main () {
    long l;
    cout << "Type a number: ";
    cin >> l;
    cout << "!" << l << " = " << factorial (l);
    return 0;
}

Type a number: 9
!9 = 362880
注意我们在函数factorial中是怎样调用它自己的，但只是在参数值大于1的时候才做调用，因为否则函数会进入死循环(an infinite recursive loop)，当参数到达0的时候，函数不继续用负数乘下去(最终可能导致运行时的堆栈溢出错误(stack overflow error)。
这个函数有一定的局限性，为简单起见，函数设计中使用的数据类型为长整型(long)。在实际的标准系统中，长整型long无法存储12！以上的阶乘值。

函数的声明（Declaring functions）
到目前为止，我们定义的所有函数都是在它们第一次被调用（通常是在main中）之前，而把main 函数放在最后。如果重复以上几个例子，但把main 函数放在其它被它调用的函数之前，你就会遇到编译错误。原因是在调用一个函数之前，函数必须已经被定义了，就像我们前面例子中所做的。
但实际上还有一种方法来避免在main 或其它函数之前写出所有被他们调用的函数的代码，那就是在使用前先声明函数的原型定义。声明函数就是对函数在的完整定义之前做一个短小重要的声明，以便让编译器知道函数的参数和返回值类型。
它的形式是：
type name ( argument_type1, argument_type2, ...);
它与一个函数的头定义（header definition）一样，除了：
?	它不包括函数的内容， 也就是它不包括函数后面花括号{}内的所有语句。
?	它以一个分号semicolon sign (;) 结束。
?	在参数列举中只需要写出各个参数的数据类型就够了，至于每个参数的名字可以写，也可以不写，但是我们建议写上。
例如：
// 声明函数原型
#include <iostream.h>

void odd (int a);
void even (int a);

int main () {
    int i;
    do {
        cout << "Type a number: (0 to exit)";
        cin >> i;
        odd (i);
    } while (i!=0);
    return 0;
}

void odd (int a) {
    if ((a%2)!=0) cout << "Number is odd.\n";
    else even (a);
}

void even (int a) {
    if ((a%2)==0) cout << "Number is even.\n";
    else odd (a);
}

Type a number (0 to exit): 9
Number is odd.
Type a number (0 to exit): 6
Number is even.
Type a number (0 to exit): 1030
Number is even.
Type a number (0 to exit): 0
Number is even.
这个例子的确不是很有效率，我相信现在你已经可以只用一半行数的代码来完成同样的功能。但这个例子显示了函数原型（prototyping functions）是怎样工作的。并且在这个具体的例子中，两个函数中至少有一个是必须定义原型的。
这里我们首先看到的是函数odd 和even的原型：
void odd (int a);
void even (int a);
这样使得这两个函数可以在它们被完整定义之前就被使用，例如在main中被调用，这样main就可以被放在逻辑上更合理的位置：即程序代码的开头部分。
尽管如此，这个程序需要至少一个函数原型定义的特殊原因是因为在odd 函数里需要调用even 函数，而在even 函数里也同样需要调用odd函数。如果两个函数任何一个都没被提前定义原型的话，就会出现编译错误，因为或者odd 在even 函数中是不可见的(因为它还没有被定义)，或者even 函数在odd函数中是不可见的。
很多程序员建议给所有的函数定义原型。这也是我的建议，特别是在有很多函数或函数很长的情况下。把所有函数的原型定义放在一个地方，可以使我们在决定怎样调用这些函数的时候轻松一些，同时也有助于生成头文件。
