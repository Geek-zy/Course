十七：预定义异常

Table of Contents

17.1 Exception
17.2 ErrorException
17.3 参见 SPL 异常处理

17.1 Exception

(PHP 5 >= 5.1.0)

简介

Exception是所有异常的基类。

类摘要

Exception {
/* 属性 */
protected string $message ;
protected int $code ;
protected string $file ;
protected int $line ;
/* 方法 */
public __construct ([ string $message = "" [, int $code = 0 [, Exception $previous = NULL ]]] )
final public string getMessage ( void )
final public Exception getPrevious ( void )
final public int getCode ( void )
final public string getFile ( void )
final public int getLine ( void )
final public array getTrace ( void )
final public string getTraceAsString ( void )
public string __toString ( void )
final private void __clone ( void )
}
属性

message
异常消息内容

code
异常代码

file
抛出异常的文件名

line
抛出异常在该文件中的行号

Exception::__construct

(PHP 5 >= 5.1.0)

Exception::__construct — 异常构造函数

说明

public Exception::__construct ([ string $message = "" [, int $code = 0 [, Exception $previous = NULL ]]] )
异常构造函数。

参数

message
抛出的异常消息内容。

code
异常代码。

previous
异常链中的前一个异常。

更新日志

版本	说明
5.3.0	增加previous参数。
注释

Note:

The message is NOT binary safe.

Exception::getMessage

(PHP 5 >= 5.1.0)

Exception::getMessage — 获取异常消息内容

说明

final public string Exception::getMessage ( void )
返回异常消息内容。

参数

此函数没有参数。

返回值

返回字符串类型的异常消息内容。

范例

Example #1 Exception::getMessage()示例

[demo]

<?php
try {
    throw new Exception("Some error message");
} catch(Exception $e) {
    echo $e->getMessage();
}
?>

[/demo]

以上例程的输出类似于：

Some error message
Exception::getPrevious

(PHP 5 >= 5.3.0)

Exception::getPrevious — 返回异常链中的前一个异常

说明

final public Exception Exception::getPrevious ( void )
返回异常链中的前一个异常（Exception::__construct()方法的第三个参数）。

参数

此函数没有参数。

返回值

返回异常链中的前一个异常Exception，否则返回NULL。

范例

Example #1 Exception::getPrevious()示例

追踪异常，并循环打印。

[demo]

<?php
class MyCustomException extends Exception {}

function doStuff() {
    try {
        throw new InvalidArgumentException("You are doing it wrong!", 112);
    } catch(Exception $e) {
        throw new MyCustomException("Something happend", 911, $e);
    }
}


try {
    doStuff();
} catch(Exception $e) {
    do {
        printf("%s:%d %s (%d) [%s]\n", $e->getFile(), $e->getLine(), $e->getMessage(), $e->getCode(), get_class($e));
    } while($e = $e->getPrevious());
}
?>

[/demo]

以上例程的输出类似于：

/home/bjori/ex.php:8 Something happend (911) [MyCustomException]
/home/bjori/ex.php:6 You are doing it wrong! (112) [InvalidArgumentException]
Exception::getCode

(PHP 5 >= 5.1.0)

Exception::getCode — 获取异常代码

说明

final public int Exception::getCode ( void )
返回异常代码。

参数

此函数没有参数。

返回值

Exception 返回整型（integer）的异常代码，但在其他类中可能返回其他类型(比如在 PDOException 中返回 string)。

范例

Example #1 Exception::getCode()示例

[demo]

<?php
try {
    throw new Exception("Some error message", 30);
} catch(Exception $e) {
    echo "The exception code is: " . $e->getCode();
}
?>

[/demo]

以上例程的输出类似于：

The exception code is: 30
Exception::getFile

(PHP 5 >= 5.1.0)

Exception::getFile — 获取发生异常的程序文件名称

说明

final public string Exception::getFile ( void )
获取发生异常的程序文件名称。

参数

此函数没有参数。

返回值

返回发生异常的程序文件名称。

范例

Example #1 Exception::getFile()示例

[demo]

<?php
try {
    throw new Exception;
} catch(Exception $e) {
    echo $e->getFile();
}
?>

[/demo]

以上例程的输出类似于：

/home/bjori/tmp/ex.php
Exception::getLine

(PHP 5 >= 5.1.0)

Exception::getLine — 获取发生异常的代码在文件中的行号

说明

final public int Exception::getLine ( void )
返回发生异常的代码在文件中的行号。

参数

此函数没有参数。

返回值

返回发生异常的代码在文件中的行号。

范例

Example #1 Exception::getLine()示例

[demo]

<?php
try {
    throw new Exception("Some error message");
} catch(Exception $e) {
    echo "The exception was thrown on line: " . $e->getLine();
}
?>

[/demo]

以上例程的输出类似于：

The exception was thrown on line: 3
Exception::getTrace

(PHP 5 >= 5.1.0)

Exception::getTrace — 获取异常追踪信息

说明

final public array Exception::getTrace ( void )
返回异常追踪信息。

参数

此函数没有参数。

返回值

返回包含异常追踪信息的数组（array）。

范例

Example #1 Exception::getTrace()示例

[demo]

<?php
function test() {
 throw new Exception;
}

try {
 test();
} catch(Exception $e) {
 var_dump($e->getTrace());
}
?>

[/demo]

以上例程的输出类似于：

array(1) {
  [0]=>
  array(4) {
    ["file"]=>
    string(22) "/home/bjori/tmp/ex.php"
    ["line"]=>
    int(7)
    ["function"]=>
    string(4) "test"
    ["args"]=>
    array(0) {
    }
  }
}
Exception::getTraceAsString

(PHP 5 >= 5.1.0)

Exception::getTraceAsString — 获取字符串类型的异常追踪信息

说明

final public string Exception::getTraceAsString ( void )
以字符串类型返回异常追踪信息。

参数

此函数没有参数。

返回值

以字符串类型返回异常追踪信息。

范例

Example #1 Exception::getTraceAsString()示例

[demo]

<?php
function test() {
    throw new Exception;
}

try {
    test();
} catch(Exception $e) {
    echo $e->getTraceAsString();
}
?>

[/demo]

以上例程的输出类似于：

#0 /home/bjori/tmp/ex.php(7): test()
#1 {main}
Exception::__toString

(PHP 5 >= 5.1.0)

Exception::__toString — 将异常对象转换为字符串

说明

public string Exception::__toString ( void )
返回转换为字符串（string）类型的异常。

参数

此函数没有参数。

返回值

返回转换为字符串（string）类型的异常。

范例

Example #1 Exception::__toString()示例

[demo]

<?php
try {
    throw new Exception("Some error message");
} catch(Exception $e) {
    echo $e;
}
?>

[/demo]

以上例程的输出类似于：

exception 'Exception' with message 'Some error message' in /home/bjori/tmp/ex.php:3
Stack trace:
#0 {main}
Exception::__clone

(PHP 5 >= 5.1.0)

Exception::__clone — 异常克隆

说明

final private void Exception::__clone ( void )
尝试克隆异常，这将导致一个致命错误。

参数

此函数没有参数。

返回值

没有返回值。

错误／异常

异常被不允许克隆。

Table of Contents

Exception::__construct — 异常构造函数
Exception::getMessage — 获取异常消息内容
Exception::getPrevious — 返回异常链中的前一个异常
Exception::getCode — 获取异常代码
Exception::getFile — 获取发生异常的程序文件名称
Exception::getLine — 获取发生异常的代码在文件中的行号
Exception::getTrace — 获取异常追踪信息
Exception::getTraceAsString — 获取字符串类型的异常追踪信息
Exception::__toString — 将异常对象转换为字符串
Exception::__clone — 异常克隆


17.2 ErrorException

(PHP 5 >= 5.1.0)

简介

错误异常。

类摘要

ErrorException extends Exception {
/* 属性 */
protected int $severity ;
/* 方法 */
public __construct ([ string $message = "" [, int $code = 0 [, int $severity = 1 [, string $filename = __FILE__ [, int $lineno = __LINE__ [, Exception $previous = NULL ]]]]]] )
final public int getSeverity ( void )
/* 继承的方法 */
final public string Exception::getMessage ( void )
final public Exception Exception::getPrevious ( void )
final public int Exception::getCode ( void )
final public string Exception::getFile ( void )
final public int Exception::getLine ( void )
final public array Exception::getTrace ( void )
final public string Exception::getTraceAsString ( void )
public string Exception::__toString ( void )
final private void Exception::__clone ( void )
}
属性

severity
异常级别

范例

Example #1 使用set_error_handler()函数将错误信息托管至ErrorException

[demo]

<?php
function exception_error_handler($errno, $errstr, $errfile, $errline ) {
    throw new ErrorException($errstr, 0, $errno, $errfile, $errline);
}
set_error_handler("exception_error_handler");

/* Trigger exception */
strpos();
?>

[/demo]

以上例程的输出类似于：

Fatal error: Uncaught exception 'ErrorException' with message 'Wrong parameter count for strpos()' in /home/bjori/tmp/ex.php:8
Stack trace:
#0 [internal function]: exception_error_handler(2, 'Wrong parameter...', '/home/bjori/php...', 8, Array)
#1 /home/bjori/php/cleandocs/test.php(8): strpos()
#2 {main}
  thrown in /home/bjori/tmp/ex.php on line 8
ErrorException::__construct

(PHP 5 >= 5.1.0)

ErrorException::__construct — 异常构造函数

说明

public ErrorException::__construct ([ string $message = "" [, int $code = 0 [, int $severity = 1 [, string $filename = __FILE__ [, int $lineno = __LINE__ [, Exception $previous = NULL ]]]]]] )
异常构造函数。

参数

message
抛出的异常消息内容。

code
异常代码。

severity
异常的严重级别。

filename
抛出异常所在的文件名。

lineno
抛出异常所在的行号。

previous
异常链中的前一个异常。

更新日志

版本	说明
5.3.0	增加previous参数。
ErrorException::getSeverity

(PHP 5 >= 5.1.0)

ErrorException::getSeverity — 获取异常的严重程度

说明

final public int ErrorException::getSeverity ( void )
返回异常的严重程度。

参数

此函数没有参数。

返回值

返回异常的严重级别。

范例

Example #1 ErrorException::getSeverity() 例子

[demo]

<?php
try {
    throw new ErrorException("Exception message", 0, 75);
} catch(ErrorException $e) {
    echo "This exception severity is: " . $e->getSeverity();
}
?>

[/demo]

以上例程的输出类似于：

This exception severity is: 75
Table of Contents

ErrorException::__construct — 异常构造函数
ErrorException::getSeverity — 获取异常的严重程度