1 C语言概述

1.1 Ｃ语言的发展过程 

1.2 当代最优秀的程序设计语言 

1.3 Ｃ语言版本 

1.4 Ｃ语言的特点 

1.5 面向对象的程序设计语言 

1.6 Ｃ和Ｃ＋＋ 

1.7 简单的Ｃ程序介绍 

1.8 输入和输出函数 

1.9 Ｃ源程序的结构特点 

1.10 书写程序时应遵循的规则 

1.11 Ｃ语言的字符集 

1.12 Ｃ语言词汇 

1.13 Turbo C 2.0集成开发环境的使用 

1.13.1 Turbo C 2.0简介和启动 

1.13.2 Turbo C 2.0集成开发环境 

1.13.3 File菜单 

1.13.4 Edit菜单 

1.13.5 Run菜单 

1.13.6 Compile菜单 


1.13.7 Project菜单 

1.13.8 Options菜单 

1.13.9 Debug菜单 

1.13.10 Break/watch菜单 

1.13.11 Turbo C 2.0的配置文件 

C语言教程 

1 C语言概述 
1.1 Ｃ语言的发展过程 




 Ｃ语言是在 70 年代初问世的。一九七八年由美国电话电报公司(AT&T)贝尔实验室正
式发表了Ｃ语言。同时由B.W.Kernighan和D.M.Ritchit合著了著名的“THE C 
PROGRAMMING LANGUAGE”一书。通常简称为《K&R》，也有人称之为《K&R》标准。
但是，在《K&R》中并没有定义一个完整的标准C 语言，后来由美国国家标准协会（American 
National Standards Institute）在此基础上制定了一个C 语言标准，于一九八三年发表。通常
称之为ANSI C。 

1.2 当代最优秀的程序设计语言 
早期的C 语言主要是用于UNIX系统。由于Ｃ语言的强大功能和各方面的优点逐渐为
人们认识，到了八十年代，C开始进入其它操作系统，并很快在各类大、中、小和微型计算
机上得到了广泛的使用，成为当代最优秀的程序设计语言之一。 


1.3 Ｃ语言版本 


 目前最流行的Ｃ语言有以下几种： 

 ·Microsoft C 或称 MS C 

 ·Borland Turbo C 或称 Turbo C 

 ·AT&T C 

这些Ｃ语言版本不仅实现了ANSI C标准，而且在此基础上各自作了一些扩充，使之更
加方便、完美。 

1.4 Ｃ语言的特点 


1·C语言简洁、紧凑，使用方便、灵活。ANSI C一共只有32个关键字: 

auto 

break 

case 

char 

const 

continue

default 

do 

double 

else 

enum 

extern 

float 

for 

goto 

if 

int 

long 

register 

return 

short 

signed 

static 

sizeof

struct 

switch 

typedef 

union 

unsigned 

void 

volatile

while 

 

 

 



9种控制语句，程序书写自由，主要用小写字母表示，压缩了一切不必要的成分。 

Turbo C扩充了11个关键字： 

asm _cs _ds _es _ss cdecl far 


huge interrupt near pascal 

注意：在C语言中，关键字都是小写的。 

2·运算符丰富。共有34种。C把括号、赋值、逗号等都作为运算符处理。从而使C的运
算类型极为丰富，可以实现其他高级语言难以实现的运算。 

3·数据结构类型丰富。 

4·具有结构化的控制语句。 

5·语法限制不太严格，程序设计自由度大。 

6·C语言允许直接访问物理地址，能进行位（bit）操作，能实现汇编语言的大部分功能，
可以直接对硬件进行操作。因此有人把它称为中级语言。 

7·生成目标代码质量高，程序执行效率高。 

8·与汇编语言相比，用C语言写的程序可移植性好。 

但是，C语言对程序员要求也高，程序员用C写程序会感到限制少、灵活性大，功能
强，但较其他高级语言在学习上要困难一些。 

1.5 面向对象的程序设计语言 


 在C的基础上，一九八三年又由贝尔实验室的Bjarne Strou-strup推出了C++。 C++进
一步扩充和完善了Ｃ语言，成为一种面向对象的程序设计语言。C++目前流行的最新版本是
Borland C++, Symantec C++和Microsoft VisualC++。 

 C++提出了一些更为深入的概念，它所支持的这些面向对象的概念容易将问题空间直接
地映射到程序空间，为程序员提供了一种与传统结构程序设计不同的思维方式和编程方法。
因而也增加了整个语言的复杂性，掌握起来有一定难度。 

1.6 Ｃ和Ｃ＋＋ 


 但是，C是C++的基础，C++语言和Ｃ语言在很多方面是兼容的。因此，掌握了Ｃ语言，
再进一步学习C++就能以一种熟悉的语法来学习面向对象的语言，从而达到事半功倍的目
的。 

1.7 简单的Ｃ程序介绍 


 为了说明Ｃ语言源程序结构的特点，先看以下几个程序。这几个程序由简到难，表现了
Ｃ语言源程序在组成结构上的特点。虽然有关内容还未介绍，但可从这些例子中了解到组成
一个C源程序的基本部分和书写格式。 

【例1.1】

#include<stdio.h>
void main() {
    printf("世界，您好！\n");
} 

.. main是主函数的函数名，表示这是一个主函数。 
.. 每一个C源程序都必须有，且只能有一个主函数(main函数)。 
.. 函数调用语句，printf函数的功能是把要输出的内容送到显示器去显示。 



.. printf函数是一个由系统定义的标准函数，可在程序中直接调用。 


【例1.2】 

#include<math.h>
#include<stdio.h>
void main(){
    double x,s;
    printf("input number:\n");
    scanf("%lf",&x);
    s=sin(x);
    printf("sine of %lf is %lf\n",x,s); 
}

.. include称为文件包含命令 
.. 扩展名为.h的文件称为头文件 
.. 定义两个实数变量，以被后面程序使用 
.. 显示提示信息 
.. 从键盘获得一个实数x 
.. 求x的正弦,并把它赋给变量s 
.. 显示程序运算结果 
.. main函数结束 


 程序的功能是从键盘输入一个数x，求x的正弦值，然后输出结果。在main()之前的两
行称为预处理命令(详见后面)。预处理命令还有其它几种，这里的include 称为文件包含命
令，其意义是把尖括号<>或引号""内指定的文件包含到本程序来，成为本程序的一部分。被
包含的文件通常是由系统提供的，其扩展名为.h。因此也称为头文件或首部文件。Ｃ语言的
头文件中包括了各个标准库函数的函数原型。因此，凡是在程序中调用一个库函数时，都必
须包含该函数原型所在的头文件。在本例中，使用了三个库函数：输入函数scanf，正弦函
数sin,输出函数printf。sin函数是数学函数，其头文件为math.h文件，因此在程序的主函数
前用include命令包含了math.h。scanf和printf是标准输入输出函数，其头文件为stdio.h，
在主函数前也用include命令包含了stdio.h文件。 

 需要说明的是，C语言规定对scanf和printf这两个函数可以省去对其头文件的包含命
令。所以在本例中也可以删去第二行的包含命令#include<stdio.h>。 

 同样，在例1.1中使用了printf函数，也省略了包含命令。 

 在例题中的主函数体中又分为两部分，一部分为说明部分，另一部为分执行部分。说明
是指变量的类型说明。例题1.1中未使用任何变量，因此无说明部分。Ｃ语言规定，源程序
中所有用到的变量都必须先说明，后使用，否则将会出错。这一点是编译型高级程序设计语
言的一个特点，与解释型的BASIC语言是不同的。说明部分是C源程序结构中很重要的组
成部分。本例中使用了两个变量x，s，用来表示输入的自变量和sin函数值。由于sin函数
要求这两个量必须是双精度浮点型，故用类型说明符double来说明这两个变量。说明部分
后的四行为执行部分或称为执行语句部分，用以完成程序的功能。执行部分的第一行是输出
语句，调用printf函数在显示器上输出提示字符串，请操作人员输入自变量x的值。第二行
为输入语句，调用scanf函数，接受键盘上输入的数并存入变量x中。第三行是调用sin函
数并把函数值送到变量s中。第四行是用printf 函数输出变量s的值，即x的正弦值。程序
结束。 

 运行本程序时，首先在显示器屏幕上给出提示串input number，这是由执行部分的第一


行完成的。用户在提示下从键盘上键入某一数，如5，按下回车键，接着在屏幕上给出计算
结果。 

1.8 输入和输出函数 
在前两个例子中用到了输入和输出函数scanf和 printf，在以后要详细介绍。这里我们
先简单介绍一下它们的格式，以便下面使用。 




 scanf和 printf这两个函数分别称为格式输入函数和格式输出函数。其意义是按指定的
格式输入输出值。因此，这两个函数在括号中的参数表都由以下两部分组成： 

 “格式控制串”，参数表 

 格式控制串是一个字符串，必须用双引号括起来，它表示了输入输出量的数据类型。各
种类型的格式表示法可参阅第三章。在printf函数中还可以在格式控制串内出现非格式控制
字符，这时在显示屏幕上将原文照印。参数表中给出了输入或输出的量。当有多个量时，用 

逗号间隔。例如： 

 printf("sine of %lf is %lf\n",x,s); 

其中%lf为格式字符，表示按双精度浮点数处理。它在格式串中两次现，对应了x和s两个
变量。其余字符为非格式字符则照原样输出在屏幕上。 

【例1.3】

#include<stdio.h>
int max(int a,int b); /*函数说明*/
void main() /*主函数*/
{
    int x,y,z; /*变量说明*/
    printf("input two numbers:\n");
    scanf("%d%d",&x,&y); /*输入x,y值*/
    z=max(x,y); /*调用max函数*/
    printf("maxmum=%d",z); /*输出*/ 
}

int max(int a,int b) /*定义max函数*/ 
{
    if(a>b)return a;else return b; /*把结果返回主调函数*/
}

上面例中程序的功能是由用户输入两个整数，程序执行后输出其中较大的数。本程序由
两个函数组成，主函数和max 函数。函数之间是并列关系。可从主函数中调用其它函数。
max 函数的功能是比较两个数，然后把较大的数返回给主函数。max 函数是一个用户自定
义函数。因此在主函数中要给出说明(程序第三行)。可见，在程序的说明部分中，不仅可以
有变量说明，还可以有函数说明。关于函数的详细内容将在以后第五章介绍。在程序的每行
后用/*和*/括起来的内容为注释部分，程序不执行注释部分。 

 上例中程序的执行过程是，首先在屏幕上显示提示串，请用户输入两个数，回车后由
scanf函数语句接收这两个数送入变量x,y中，然后调用max函数，并把x,y 的值传送给max
函数的参数a,b。在max函数中比较a,b的大小，把大者返回给主函数的变量z，最后在屏
幕上输出z的值。 


1.9 Ｃ源程序的结构特点 


 1.一个Ｃ语言源程序可以由一个或多个源文件组成。 

 2.每个源文件可由一个或多个函数组成。 

 3.一个源程序不论由多少个文件组成，都有一个且只能有一个main函数，即主函数。 

 4.源程序中可以有预处理命令(include 命令仅为其中的一种)，预处理命令通常应放在源
文件或源程序的最前面。 

 5.每一个说明，每一个语句都必须以分号结尾。但预处理命令，函数头和花括号“}”
之后不能加分号。 

 6.标识符，关键字之间必须至少加一个空格以示间隔。若已有明显的间隔符，也可不再
加空格来间隔。 

1.10 书写程序时应遵循的规则 


 从书写清晰，便于阅读，理解，维护的角度出发，在书写程序时应遵循以下规则： 

 1.一个说明或一个语句占一行。 

 2.用{} 括起来的部分，通常表示了程序的某一层次结构。{}一般与该结构语句的第一
个字母对齐，并单独占一行。 

 3.低一层次的语句或说明可比高一层次的语句或说明缩进若干格后书写。以便看起来更
加清晰，增加程序的可读性。 

 在编程时应力求遵循这些规则，以养成良好的编程风格。 

1.11 Ｃ语言的字符集 


 字符是组成语言的最基本的元素。Ｃ语言字符集由字母，数字，空格，标点和特殊字符
组成。在字符常量，字符串常量和注释中还可以使用汉字或其它可表示的图形符号。 

 1.字母 

 小写字母a～z共26个 

 大写字母A～Z共26个 

 2.数字 

 0～9共10个 

 3.空白符 

 空格符、制表符、换行符等统称为空白符。空白符只在字符常量和字符串常量中起作用。
在其它地方出现时，只起间隔作用，编译程序对它们忽略不计。因此在程序中使用空白符与
否，对程序的编译不发生影响，但在程序中适当的地方使用空白符将增加程序的清晰性和可
读性。 

 4.标点和特殊字符 

1.12 Ｃ语言词汇 


 在Ｃ语言中使用的词汇分为六类：标识符，关键字，运算符，分隔符，常量，注释符等。 


 1.标识符 

 在程序中使用的变量名、函数名、标号等统称为标识符。除库函数的函数名由系统定义
外，其余都由用户自定义。C 规定，标识符只能是字母(A～Z，a～z)、数字(0～9)、下划线
(_)组成的字符串，并且其第一个字符必须是字母或下划线。 

 以下标识符是合法的： 

 a, x, x3, BOOK_1, sum5 

 以下标识符是非法的： 

 3s 以数字开头 

 s*T 出现非法字符* 

 -3x 以减号开头 

 bowy-1 出现非法字符-(减号) 

 在使用标识符时还必须注意以下几点： 

 (1)标准C不限制标识符的长度，但它受各种版本的C 语言编译系统限制，同时也受到
具体机器的限制。例如在某版本C 中规定标识符前八位有效，当两个标识符前八位相同时，
则被认为是同一个标识符。 

 (2)在标识符中，大小写是有区别的。例如BOOK和book 是两个不同的标识符。 

 (3)标识符虽然可由程序员随意定义，但标识符是用于标识某个量的符号。因此，命名
应尽量有相应的意义，以便于阅读理解，作到“顾名思义”。 

 2.关键字 

 关键字是由Ｃ语言规定的具有特定意义的字符串，通常也称为保留字。用户定义的标识
符不应与关键字相同。Ｃ语言的关键字分为以下几类： 

 (1)类型说明符 

 用于定义、说明变量、函数或其它数据结构的类型。如前面例题中用到的int,double等 

 (2)语句定义符 

 用于表示一个语句的功能。如例1.3中用到的if else就是条件语句的语句定义符。 

 (3)预处理命令字 

 用于表示一个预处理命令。如前面各例中用到的include。 

 3.运算符 

 Ｃ语言中含有相当丰富的运算符。运算符与变量，函数一起组成表达式，表示各种运算
功能。运算符由一个或多个字符组成。 

 4.分隔符 

 在Ｃ语言中采用的分隔符有逗号和空格两种。逗号主要用在类型说明和函数参数表中，
分隔各个变量。空格多用于语句各单词之间，作间隔符。在关键字，标识符之间必须要有一
个以上的空格符作间隔，否则将会出现语法错误，例如把int a;写成 inta;C编译器会把inta 

当成一个标识符处理，其结果必然出错。 

 5.常量 

 C 语言中使用的常量可分为数字常量、字符常量、字符串常量、符号常量、转义字符
等多种。在后面章节中将专门给予介绍。 

 6.注释符 

C 语言的注释符是以“/*”开头并以“*/”结尾的串。在“/*”和“*/”之间的即为注
释。程序编译时，不对注释作任何处理。注释可出现在程序中的任何位置。注释用来向用户
提示或解释程序的意义。在调试程序中对暂不使用的语句也可用注释符括起来，使翻译跳过
不作处理，待调试结束后再去掉注释符。 


1.13 Turbo C 2.0集成开发环境的使用 


1.13.1 Turbo C 2.0简介和启动 
我们上机实习和将来考试都是使用Borland Turbo C 2.0这个版本。该系统是DOS操作系
统支持下的软件，在windows 98环境下，可以在DOS窗口下运行。 

我们机房是在D盘根目录下建立一个TC 子目 录下安装Turbo C 2.0系统的。 TC下还
建立了两个了目录LIB和INCLUDE, LIB子目录中存放库文件, INCLUDE 子目录中存放所
有头文件。 

在DOS环境下或在windows 98的DOS窗口下运行运行Turbo C 2.0时, 只要在TC 子目
录下键入TC并回车即可进入Turbo C 2. 0 集成开发环境。 

在windows 98环境下，也可以选运行菜单，然后键入d:\tc\tc即可，也可以在tc文件夹
找到tc.exe文件，然后用鼠标双击该文件名也可进入Turbo C 2. 0 集成开发环境。 

Turbo C 是美国Borland 公司的产品,Borland公司是一家专门从事软件开发、研制的大
公司。该公司相继推出了一套 Turbo系列软件, 如Turbo BASIC, TurboPascal, Turbo Prolog, 
这些软件很受用户欢迎。该公司在1987年首次推出TurboC 1.0 产品, 其中使用了全然一新
的集成开发环境, 即使用了一系列下拉式菜单, 将文本编辑、程序编译、连接以及程序运行
一体化, 大大方便了程序的开发。1988年, Borland 公司又推出Turbo C1.5版本, 增加了图形
库和文本窗口函数库等, 而Turbo C 2.0 则是该公司1989年出版的。Turbo C2.0在原来集成
开发环境的基础上增加了查错功能, 并可以在Tiny模式下直接生成.COM (数据、代码、堆
栈处在同一64K 内存中) 文件。还可对数学协处理器 (支持8087/80287/80387等)进行仿真。 

 Borland公司后来又推出了面向对象的程序软件包Turbo C++,它继承发展Turbo C 2.0 
的集成开发环境, 并包含了面向对象的基本思想和设计方法。1991年为了适用Microsoft 公
司的Windows 3.0 版本, Borland 公司又将Turbo C++ 作了更新, 即Turbo C 的新一代产品
Borlandc C++也已经问世了。 


1.13.2 Turbo C 2.0集成开发环境 
进入Turbo C 2.0集成开发环境中后, 屏幕上显示: 





其中顶上一行为Turbo C 2.0 主菜单, 中间窗口为编辑区, 接下来是信息窗 口, 最底下
一行为参考行。这四个窗口构成了Turbo C 2.0的主屏幕, 以后的编程、 编译、调试以及运
行都将在这个主屏幕中进行。 

主菜单在Turbo C 2.0主屏幕顶上一行, 显示下列内容: 

File Edit Run Compile Project Options Debug Break/watch 

除Edit外, 其它各项均有子菜单, 只要用Alt加上某项中第一个字母, 就可进入该项的
子菜单中。 


1.13.3 File菜单 


按Alt+F可进入File菜单, 如图: 

 

File菜单的子菜单共有9项，分别叙述如下： 

1. Load：装入一个文件, 可用类似DOS的通配符(如*.C)来进行列表选择。也可装入其它




扩展名的文件, 只要给出文件名(或只给路径)即可。该项的热键为F3, 即只要按F3即可
进入该项, 而不需要先进入File菜单再选此项。 
2. Pick：将最近装入编辑窗口的8个文件列成一个表让用户选择, 选择后将该程序装入编
辑区, 并将光标置在上次修改过的地方。其热健为Alt-F3。 
3. New：新建文件, 缺省文件名为NONAME.C, 存盘时可改名。 
4. Save：将编辑区中的文件存盘, 若文件名是NONAME.C时, 将询问是否更改文件名, 其
热键为F2。 
5. Write to：可由用户给出文件名将编辑区中的文件存盘, 若该文件已存在, 则询问要不
要 覆盖。 
6. Directory：显示目录及目录中的文件, 并可由用户选择。 
7. Change dir：显示当前默认目录, 用户可以改变默认目录。 
8. Os shell：暂时退出Turbo C 2.0到DOS提示符下, 此时可以运行DOS 命令, 若想回
到 Turbo C 2.0中, 只要在DOS状态下键入EXIT即可。 
9. Quit：退出Turbo C 2.0, 返回到DOS操作系统中, 其热键为Alt+X。 


说明: 

以上各项可用光标键移动色棒进行选择, 回车则执行。也可用每一项的第一个大写字母
直接选择。若要退到主菜单或从它的下一级菜单列表框退回均可用Esc键, Turbo C 2.0所有
菜单均采用这种方法进行操作, 以下不再说明。 

1.13.4 Edit菜单 
按Alt+E可进入编辑菜单, 若再回车, 则光标出现在编辑窗口, 此时用户可以 进行文本
编辑。编辑方法基本与wordstar相同, 可用F1键获得有关编辑方法的帮助信息。 


1. 与编辑有关的功能键如下: 
F1 获得Turbo C 2.0编辑命令的帮助信息； 

F5 扩大编辑窗口到整个屏幕； 

F6 在编辑窗口与信息窗口之间进行切换； 

F10 从编辑窗口转到主菜单。 


2. 编辑命令简介: 
PageUp 向前翻页 

PageDn 向后翻页 

Home 将光标移到所在行的开始 

End 将光标移到所在行的结尾 

Ctrl+Y 删除光标所在的一行 

Ctrl+T 删除光标所在处的一个词 

Ctrl+KB 设置块开始 

Ctrl+KK 设置块结尾 

Ctrl+KV 块移动 

Ctrl+KC 块拷贝 

Ctrl+KY 块删除 

Ctrl+KR 读文件 

Ctrl+KW 存文件 

Ctrl+KP 块文件打印 





Ctrl+Q[ 查找Turbo C 2.0双界符的后匹配符 

Ctrl+Q] 查找Turbo C 2.0双界符的前匹配符 

: 




1)

a) 花括符 {和} 
b) 尖括符 <和> 
c) 圆括符 (和) 
d) 方括符 [和] 
e) 注释符 /*和*/ 
f) 双引号 " 
g) 单引号 ' 
Turo C 2.0在编


非空字符对齐。在编辑窗口中, Ctrl+OL为自动缩进开关的控制键。 


 
1. Run：运行由Project/Project name项指定的文件名或当前编辑区的文件。如果对上次编

译后的源代码未做过修改, 则直接运行到下一个断点(没有断点则运行到结束)。否则先
进行编译、连接后才运行, 其热键为Ctrl+F9。 
Program reset：中止当前的调试, 释放分给程序的
3. Go to cursor：:调试程序时使用, 选择该项可使程序运行到光标所在行。光标所
为一条可执行语句, 否则提示错误。其热键为F4。 
Trace into：在执行一条调用其它用户定义的子函数时
跟踪到该子函数内部去执行, 其热键为F7。 
Step over：执行当前函数的下一条语句, 即使
数 内部, 其热键为F8。 



e菜单
1.13.6 Compil
按Alt+C可进入Compile菜


 
1. Compile to OBJ：将一个C源文件编译生成.OBJ目标文件, 同时显示生成的文件名。其
热键为 Alt+F9。 

件名是下面几项之一： 
1) 由Projec
2) 若没有项目文件名, 则由Primary C file说明的源文件。 
3) 若以上两项都没 
EX file：把当前.OBJ文件及库文件连接在一起生
d all重新编译项目里的所有文件, 并进行装配生成.EXE文件
面几条命令要作过时检查, 即如果目前项目里源文件的


相同或更早, 则拒绝对源文件进行编译)。 
5. Primary C file：当在该项中指定了主文件后, 在以后的编译中, 如没有项目文件名则编译
此项中规定的主C文件, 如果编译中有错误, 则将此文件调入编辑窗口, 不管目前窗
口 中是不是主C文件。 
6. Get info：获得有关当前路径、源文件名、源文件字节大小、编译中的错误数目、可用空
间等信息，如图： 



 

1.13.7 Project菜单 
按Alt+P可进入Project菜单, 该菜单包括以下内容，如图所示： 




 

1. Project name：项目名具有.PRJ的扩展名, 其中包括将要编译、连接的文件名。例如有一
个程 序由file1.c, file2.c, file3.c组成, 要将这3个文件编译装配成一个file.exe的执行文
件, 可以先建立一个file.prj的项目文件, 其内容如下: 
file1.c 

 file2.c 

 file3.c 

此时将file.prj放入Project name项中, 以后进行编译时将自动对项目文件中规定的三个
源文件分别进行编译。然后连接成file.exe文件。如果其中有些文件已经编译成.OBJ文





件, 而又没有修改过, 可直接写上.OBJ扩 展名。此时将不再编译而只进行连接。 

例如: 

 file1.obj 

file2.c 

file3.c 

将不对file1.c进行编译, 而直接连接。 




说明: 

当项目文件中的每个文件无扩展名时, 均按源文件对待, 另外, 其中的文件也可以是库
文件, 但必须写上扩展名.LIB。 

2. Break make on：由用户选择是否在有Warining、Errors、Fatal Errors时或Link之前退出
Make编译。 
3. Auto dependencies：当开关置为on, 编译时将检查源文件与对应的.OBJ文件日期和时间, 
否则不进 行检查。 
4. Clear project：清除Project/Project name中的项目文件名。 
5. Remove messages：把错误信息从信息窗口中清除掉。 
1.13.8 Options菜单 
按Alt+O可进入Options菜单, 该菜单对初学者来说要谨慎使用，该菜单有以下几个内
容，如图所示： 




 

1. Compiler：本项选择又有许多子菜单, 可以让用户选择硬件配置、存储模型、调试技术、 代
码优化、对话信息控制和宏定义。这些子菜单如图所示： 



 

1) Model：共有Tiny, small, medium, compact, large, huge 六种不同模式可由同户选 择。 
2) Define：打开一个宏定义框, 同户可输入宏定义。多重定义可同分号, 赋值可用等
号。 
3) Code generation：它又有许多任选项, 这些任选项告诉编译器产生什么样的目标代
码。 
.. Calling convention 可选择C或Pascal方式传递参数。 
.. Instruction set 可选择8088/8086或80186/80286指令系列。 
.. Floating point 可选择仿真浮点、数学协处理器浮点或无浮点运算。 
.. Default char type 规定char的类型。 
.. Alignonent 规定地址对准原则。 
.. Merge duplicate strings 作优化用, 将重复的字符串合并在一起。 
.. Standard stack frame 产生一个标准的栈结构。 
.. Test stack overflow 产生一段程序运行时检测堆栈溢出的代码。 
.. Line number 在.OBJ文件中放进行号以供调试时用。 
.. OBJ debug information 在.OBJ文件中产生调试信息。 


4) Optimization：它又有许多任选项。 
.. Optimize for选择是对程序小型化还是对程序速度进行优化处理。 
.. Use register variable 用来选择是否允许使用寄存器变量。 
.. Register optimization尽可能使用寄存器变量以减少过多的取数操作。 
.. Jump optimization通过去除多余的跳转和调整循环与开关语句的办法, 压缩代
码。 


5) Source：它又有许多任选项。 
.. Indentifier length说明标识符有效字符的个数, 默认为32个。 
.. Nested comments是否允许嵌套注释。 
.. ANSI keywords only是只允许ANSI关键字还是也允许Turbo C2.0关键字。 


6) Error 
.. Error stop after多少个错误时停止编译, 默认为25个。 
.. Warning stop after多少个警告错误时停止编译, 默认为100个。 





.. Display warning 
.. Portability warning移植性警告错误。 
.. ANSI Violations侵犯了ANSI关键字的警告错误。 
.. Common error常见的警告错误。 
.. Less common error少见的警告错误。 


7) Names ：用于改变段(segment)、组(group) 和类(class)的名字,默认值为CODE, DATA, 
BSS。 


2. Linker：本菜单设置有关连接的选择项, 它有以下内容，如图所示： 


 

1) Map file menu 选择是否产生.MAP文件。 
2) Initialize segments是否在连接时初始化没有初始化的段。 
3) Devault libraries是否在连接其它编译程序产生的目标文件时去寻找其缺省库。 
4) Graphics library 是否连接graphics库中的函数。 
5) Warn duplicate symbols当有重复符号时产生警告信息。 
6) Stack warinig是否让连接程序产生No stack的警告信息。 
7) Case-sensitive link是否区分大、小写字。 


3. Environment：菜单规定是否对某些文件自动存盘及制表键和屏幕大小的设置，它有以下
内容，如图所示： 



 

1) Message tracking： 
.. Current file 跟踪在编辑窗口中的文件错误。 
.. All files跟踪所有文件错误。 
.. Off 不跟踪。 


2) Keep message ：编译前是否清除Message窗口中的信息。 
3) Config auto save：选on时, 在Run, Shell或退出集成开发环境之前,如果Turbo C 2.0
的配置被改过, 则所做的改动将存入配置文件中。选off时不存。 
4) Edit auto save：是否在Run或Shell之前, 自动存储编辑的源文件。 
5) Backup file：是否在源文件存盘时产生后备文件(.BAK文件)。 
6) Tab size：设置制表键大小, 默认为8。 
7) Zoomed windows：将现行活动窗口放大到整个屏幕, 其热键为F5。 
8) Screen size设置屏幕文本大小。 


4. Directories：规定编译、连接所需文件的路径, 有下列各项，如图所示： 



 

（1） Include directories：包含文件的路径, 多个子目录用";"分开。 
（2） Library directories：库文件路径, 多个子目录用";"分开。 
（3） Output directoried：输出文件(.OBJ, .EXE, .MAP文件)的目录。 
（4） Turbo C directoried：Turbo C 所在的目录。 
（5） Pick file name：定义加载的pick文件名, 如不定义则从currentpick file中取。 


5. Arguments：允许用户使用命令行参数。 
6. Save options：保存所有选择的编译、连接、调试和项目到配置文件中, 缺省的配置文件
为TCCONFIG.TC。 
7. Retrive options装入一个配置文件到TC中, TC将使用该文件的选择项。 
1.13.9 Debug菜单 


按Alt+D可选择Debug菜单, 该菜单主要用于查错, 它包括以下内容，如图所示： 


 

1. Evaluate 
1) Expression要计算结果的表达式。 
2) Result显示表达式的计算结果。 
3) New value赋给新值。 


2. Call stack：该项不可接触。而在Turbo C debuger 时用于检查堆栈情况。 
3. Find function在运行Turbo C debugger时用于显示规定的函数。 
4. Refresh display如果编辑窗口偶然被用户窗口重写了可用此恢复编辑窗口的内容。 
1.13.10 Break/watch菜单 
按Alt+B可进入Break/watch菜单, 该菜单有以下内容，如图所示： 




 

1. Add watch： 向监视窗口插入一监视表达式。 



2. Delete watch：从监视窗口中删除当前的监视表达式。 
3. Edit watch：在监视窗口中编辑一个监视表达式。 
4. Remove all ：watches从监视窗口中删除所有的监视表达式。 
5. Toggle breakpoint：对光标所在的行设置或清除断点。 
6. Clear all breakpoints：清除所有断点。 
7. View next breakpoint：将光标移动到下一个断点处。 
1.13.11 Turbo C 2.0的配置文件 
所谓配置文件是包含Turbo C 2.0有关信息的文件, 其中存有编译、连接的选择和路径等
信息。可以用下述方法建立Turbo C 2.0的配置： 




1. 建立用户自命名的配置文件：可以从Options菜单中选择Options/Save options命令, 将
当前集成开发环境的所有配置存入一个由用户命名的配置文件中。下次启动TC时只要
在DOS下键入: 
tc/c<用户命名的配置文件名> 

就会按这个配置文件中的内容作为Turbo C 2.0的选择。 


2. 若设置Options/Environment/Config auto save 为on, 则退出集成开发环境时, 当前的设置
会自动存放到Turbo C 2.0配置文件TCCONFIG.TC中。Turbo C 在启动时会自动寻找这
个配置文件。 
3. 用TCINST设置Turbo C的有关配置, 并将结果存入TC.EXE中。Turbo C 在启动时, 若
没有找到配置文件, 则取TC.EXE中的缺省值。 

